
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

COMMENT ON SCHEMA "public" IS 'standard public schema';

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

CREATE TYPE "public"."app_permission" AS ENUM (
    'event.delete',
    'event.update',
    'user.change_role'
);

ALTER TYPE "public"."app_permission" OWNER TO "postgres";

CREATE TYPE "public"."app_role" AS ENUM (
    'client',
    'employee',
    'manager',
    'owner'
);

ALTER TYPE "public"."app_role" OWNER TO "postgres";

CREATE TYPE "public"."pet_locaiton" AS ENUM (
    'Indoor only',
    'Outdoor only',
    'Indoor and Outdoor'
);

ALTER TYPE "public"."pet_locaiton" OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."custom_access_token_hook1"("event" "jsonb") RETURNS "jsonb"
    LANGUAGE "plpgsql" IMMUTABLE
    AS $$declare
    claims jsonb;
    user_role public.app_role;
  begin
    -- Check if the user is marked as admin in the profiles table
    select role into user_role from public.user_roles where user_id = (event->>'user_id')::uuid;

    claims := event->'claims';

    if user_role is not null then
      -- Set the claim
      claims := jsonb_set(claims, '{user_role}', to_jsonb(user_role));
    else
      claims := jsonb_set(claims, '{user_role}', 'null');
    end if;

    -- Update the 'claims' object in the original event
    event := jsonb_set(event, '{claims}', claims);

    -- Return the modified or original event
    return event;
  end;$$;

ALTER FUNCTION "public"."custom_access_token_hook1"("event" "jsonb") OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."handle_new_user"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$begin
  insert into public.users (id, first_name, last_name,  avatar_url, contact_email, created_at)
  values (new.id, new.raw_user_meta_data->>'first_name', new.raw_user_meta_data->>'last_name', new.raw_user_meta_data->>'avatar_url', new.email, now());

  insert into public.user_roles (user_id, role)
  values (new.id, 'client');

  return new;
end;$$;

ALTER FUNCTION "public"."handle_new_user"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."addresses" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "address" "text",
    "city" "text",
    "state" "text",
    "zipcode" integer,
    "directions" "text"
);

ALTER TABLE "public"."addresses" OWNER TO "postgres";

ALTER TABLE "public"."addresses" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."Addresses_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."event_times" (
    "id" bigint NOT NULL,
    "period" "text" NOT NULL,
    "time_range" "text"
);

ALTER TABLE "public"."event_times" OWNER TO "postgres";

ALTER TABLE "public"."event_times" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."event_times_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."event_types" (
    "id" bigint NOT NULL,
    "type" "text" NOT NULL
);

ALTER TABLE "public"."event_types" OWNER TO "postgres";

ALTER TABLE "public"."event_types" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."event_types_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."events" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "now"(),
    "event_date" "date",
    "event_type_id" bigint,
    "event_time_id" bigint,
    "client_id" "uuid",
    "employee_id" "uuid",
    "pet_ids" bigint[],
    "location_id" bigint,
    "checked_in_at" timestamp with time zone,
    "completed_at" timestamp with time zone,
    "notes" "text",
    "important_notes" "text",
    "photo_urls" "text"[],
    "photo_public_urls" "text"[],
    "client_viewed_at" timestamp with time zone,
    "manager_viewed_at" timestamp with time zone
);

ALTER TABLE "public"."events" OWNER TO "postgres";

ALTER TABLE "public"."events" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."events_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."home_info" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "now"(),
    "alarm" boolean,
    "door_lockbox_code" "text",
    "access_parking" "text",
    "others_with_access" "text",
    "trash_recycling" "text",
    "pet_waste" "text",
    "pet_carriers" "text",
    "pet_supplies" "text",
    "cleaning_supplies" "text",
    "house_notes" "text",
    "trails_walking_route" "text",
    "other_notes" "text"
);

ALTER TABLE "public"."home_info" OWNER TO "postgres";

ALTER TABLE "public"."home_info" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."home_info_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."pets" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "now"(),
    "owner_id" "uuid",
    "name" "text",
    "type" "text",
    "breed" "text",
    "color" "text",
    "gender" "text",
    "weight" real,
    "age" "date",
    "spayed_neutered" boolean,
    "personality" "text",
    "routine" "text",
    "feeding_food_brand" "text",
    "medical_needs" boolean,
    "dietary_needs" boolean,
    "other_needs" boolean,
    "special_needs" "text",
    "notes" "text",
    "pet_stays" "public"."pet_locaiton",
    "photo_url" "text",
    "photo_public_url" "text"
);

ALTER TABLE "public"."pets" OWNER TO "postgres";

ALTER TABLE "public"."pets" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."pets_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."phone_numbers" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "user_id" "uuid",
    "number" "text",
    "type" "text"
);

ALTER TABLE "public"."phone_numbers" OWNER TO "postgres";

ALTER TABLE "public"."phone_numbers" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."phone_numbers_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."role_permissions" (
    "id" bigint NOT NULL,
    "role" "public"."app_role" NOT NULL,
    "permission" "public"."app_permission" NOT NULL
);

ALTER TABLE "public"."role_permissions" OWNER TO "postgres";

COMMENT ON TABLE "public"."role_permissions" IS 'App permissions';

ALTER TABLE "public"."role_permissions" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."role_permissions_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."user_roles" (
    "id" bigint NOT NULL,
    "user_id" "uuid" NOT NULL,
    "role" "public"."app_role" NOT NULL
);

ALTER TABLE "public"."user_roles" OWNER TO "postgres";

COMMENT ON TABLE "public"."user_roles" IS 'Types of users';

ALTER TABLE "public"."user_roles" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."user_role_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."users" (
    "id" "uuid" NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "now"(),
    "username" "text",
    "first_name" "text",
    "last_name" "text",
    "avatar_url" "text",
    "contact_email" "text",
    "created_at" timestamp with time zone,
    "avatar_public_url" "text",
    "emergency_contact" "text",
    "address_id" bigint,
    "home_info_id" bigint,
    "veterinary_id" bigint,
    CONSTRAINT "username_length" CHECK (("char_length"("username") >= 3))
);

ALTER TABLE "public"."users" OWNER TO "postgres";

COMMENT ON TABLE "public"."users" IS 'All application users';

COMMENT ON COLUMN "public"."users"."created_at" IS 'When user was created';

COMMENT ON COLUMN "public"."users"."avatar_public_url" IS 'public url for the users avatar';

CREATE TABLE IF NOT EXISTS "public"."veterinarians" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" "text",
    "address_id" bigint,
    "phone_id" bigint,
    "verified" boolean
);

ALTER TABLE "public"."veterinarians" OWNER TO "postgres";

ALTER TABLE "public"."veterinarians" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."veterinarians_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE ONLY "public"."addresses"
    ADD CONSTRAINT "Addresses_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."event_times"
    ADD CONSTRAINT "event_times_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."event_types"
    ADD CONSTRAINT "event_types_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."events"
    ADD CONSTRAINT "events_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."home_info"
    ADD CONSTRAINT "home_info_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."pets"
    ADD CONSTRAINT "pets_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."phone_numbers"
    ADD CONSTRAINT "phone_numbers_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."role_permissions"
    ADD CONSTRAINT "role_permissions_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."user_roles"
    ADD CONSTRAINT "user_role_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."user_roles"
    ADD CONSTRAINT "user_roles_user_id_key" UNIQUE ("user_id");

ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "users_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."veterinarians"
    ADD CONSTRAINT "veterinarians_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."events"
    ADD CONSTRAINT "public_events_client_id_fkey" FOREIGN KEY ("client_id") REFERENCES "public"."users"("id");

ALTER TABLE ONLY "public"."events"
    ADD CONSTRAINT "public_events_employee_id_fkey" FOREIGN KEY ("employee_id") REFERENCES "public"."users"("id");

ALTER TABLE ONLY "public"."events"
    ADD CONSTRAINT "public_events_event_time_id_fkey" FOREIGN KEY ("event_time_id") REFERENCES "public"."event_times"("id");

ALTER TABLE ONLY "public"."events"
    ADD CONSTRAINT "public_events_event_type_id_fkey" FOREIGN KEY ("event_type_id") REFERENCES "public"."event_types"("id");

ALTER TABLE ONLY "public"."events"
    ADD CONSTRAINT "public_events_location_id_fkey" FOREIGN KEY ("location_id") REFERENCES "public"."addresses"("id");

ALTER TABLE ONLY "public"."pets"
    ADD CONSTRAINT "public_pets_owner_id_fkey" FOREIGN KEY ("owner_id") REFERENCES "public"."users"("id");

ALTER TABLE ONLY "public"."phone_numbers"
    ADD CONSTRAINT "public_phone_numbers_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id");

ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "public_users_address_id_fkey" FOREIGN KEY ("address_id") REFERENCES "public"."addresses"("id");

ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "public_users_home_info_id_fkey" FOREIGN KEY ("home_info_id") REFERENCES "public"."home_info"("id");

ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "public_users_veterinary_id_fkey" FOREIGN KEY ("veterinary_id") REFERENCES "public"."veterinarians"("id");

ALTER TABLE ONLY "public"."veterinarians"
    ADD CONSTRAINT "public_veterinarians_address_id_fkey" FOREIGN KEY ("address_id") REFERENCES "public"."addresses"("id");

ALTER TABLE ONLY "public"."veterinarians"
    ADD CONSTRAINT "public_veterinarians_phone_id_fkey" FOREIGN KEY ("phone_id") REFERENCES "public"."phone_numbers"("id");

ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "users_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;

CREATE POLICY "Allow auth admin to read user roles" ON "public"."user_roles" FOR SELECT TO "supabase_auth_admin" USING (true);

CREATE POLICY "Public users are viewable by everyone." ON "public"."users" FOR SELECT USING (true);

CREATE POLICY "Users can insert their own profile." ON "public"."users" FOR INSERT WITH CHECK (("auth"."uid"() = "id"));

CREATE POLICY "Users can update own profile." ON "public"."users" FOR UPDATE USING (("auth"."uid"() = "id"));

ALTER TABLE "public"."addresses" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."event_times" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."event_types" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."events" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."home_info" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."pets" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."phone_numbers" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."role_permissions" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."user_roles" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."users" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."veterinarians" ENABLE ROW LEVEL SECURITY;

ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";

GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";
GRANT USAGE ON SCHEMA "public" TO "supabase_auth_admin";

GRANT ALL ON FUNCTION "public"."custom_access_token_hook1"("event" "jsonb") TO "service_role";
GRANT ALL ON FUNCTION "public"."custom_access_token_hook1"("event" "jsonb") TO "supabase_auth_admin";

GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "anon";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "service_role";

GRANT ALL ON TABLE "public"."addresses" TO "anon";
GRANT ALL ON TABLE "public"."addresses" TO "authenticated";
GRANT ALL ON TABLE "public"."addresses" TO "service_role";

GRANT ALL ON SEQUENCE "public"."Addresses_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."Addresses_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."Addresses_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."event_times" TO "anon";
GRANT ALL ON TABLE "public"."event_times" TO "authenticated";
GRANT ALL ON TABLE "public"."event_times" TO "service_role";

GRANT ALL ON SEQUENCE "public"."event_times_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."event_times_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."event_times_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."event_types" TO "anon";
GRANT ALL ON TABLE "public"."event_types" TO "authenticated";
GRANT ALL ON TABLE "public"."event_types" TO "service_role";

GRANT ALL ON SEQUENCE "public"."event_types_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."event_types_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."event_types_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."events" TO "anon";
GRANT ALL ON TABLE "public"."events" TO "authenticated";
GRANT ALL ON TABLE "public"."events" TO "service_role";

GRANT ALL ON SEQUENCE "public"."events_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."events_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."events_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."home_info" TO "anon";
GRANT ALL ON TABLE "public"."home_info" TO "authenticated";
GRANT ALL ON TABLE "public"."home_info" TO "service_role";

GRANT ALL ON SEQUENCE "public"."home_info_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."home_info_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."home_info_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."pets" TO "anon";
GRANT ALL ON TABLE "public"."pets" TO "authenticated";
GRANT ALL ON TABLE "public"."pets" TO "service_role";

GRANT ALL ON SEQUENCE "public"."pets_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."pets_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."pets_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."phone_numbers" TO "anon";
GRANT ALL ON TABLE "public"."phone_numbers" TO "authenticated";
GRANT ALL ON TABLE "public"."phone_numbers" TO "service_role";

GRANT ALL ON SEQUENCE "public"."phone_numbers_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."phone_numbers_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."phone_numbers_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."role_permissions" TO "anon";
GRANT ALL ON TABLE "public"."role_permissions" TO "authenticated";
GRANT ALL ON TABLE "public"."role_permissions" TO "service_role";

GRANT ALL ON SEQUENCE "public"."role_permissions_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."role_permissions_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."role_permissions_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."user_roles" TO "service_role";
GRANT ALL ON TABLE "public"."user_roles" TO "supabase_auth_admin";

GRANT ALL ON SEQUENCE "public"."user_role_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."user_role_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."user_role_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."users" TO "anon";
GRANT ALL ON TABLE "public"."users" TO "authenticated";
GRANT ALL ON TABLE "public"."users" TO "service_role";

GRANT ALL ON TABLE "public"."veterinarians" TO "anon";
GRANT ALL ON TABLE "public"."veterinarians" TO "authenticated";
GRANT ALL ON TABLE "public"."veterinarians" TO "service_role";

GRANT ALL ON SEQUENCE "public"."veterinarians_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."veterinarians_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."veterinarians_id_seq" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
